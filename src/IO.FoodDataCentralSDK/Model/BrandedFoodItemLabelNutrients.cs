/* 
 * Food Data Central API
 *
 * The FoodData Central API provides REST access to FoodData Central (FDC). It is intended primarily to assist application developers wishing to incorporate nutrient data into their applications or websites.   To take full advantage of the API, developers should familiarize themselves with the database by reading the database documentation available via links on [Data Type Documentation](https://fdc.nal.usda.gov/data-documentation.html). This documentation provides the detailed definitions and descriptions needed to understand the data elements referenced in the API documentation.      Additional details about the API including rate limits, access, and licensing are available on the [FDC website](https://fdc.nal.usda.gov/api-guide.html)
 *
 * OpenAPI spec version: 1.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.FoodDataCentralSDK.Client.SwaggerDateConverter;
namespace IO.FoodDataCentralSDK.Model
{
    /// <summary>
    /// BrandedFoodItemLabelNutrients
    /// </summary>
    [DataContract]
        public partial class BrandedFoodItemLabelNutrients :  IEquatable<BrandedFoodItemLabelNutrients>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BrandedFoodItemLabelNutrients" /> class.
        /// </summary>
        /// <param name="fat">fat.</param>
        /// <param name="saturatedFat">saturatedFat.</param>
        /// <param name="transFat">transFat.</param>
        /// <param name="cholesterol">cholesterol.</param>
        /// <param name="sodium">sodium.</param>
        /// <param name="carbohydrates">carbohydrates.</param>
        /// <param name="fiber">fiber.</param>
        /// <param name="sugars">sugars.</param>
        /// <param name="protein">protein.</param>
        /// <param name="calcium">calcium.</param>
        /// <param name="iron">iron.</param>
        /// <param name="potassium">potassium.</param>
        /// <param name="calories">calories.</param>
        public BrandedFoodItemLabelNutrients(BrandedFoodItemLabelNutrientsFat fat = default(BrandedFoodItemLabelNutrientsFat), BrandedFoodItemLabelNutrientsSaturatedFat saturatedFat = default(BrandedFoodItemLabelNutrientsSaturatedFat), BrandedFoodItemLabelNutrientsTransFat transFat = default(BrandedFoodItemLabelNutrientsTransFat), BrandedFoodItemLabelNutrientsTransFat cholesterol = default(BrandedFoodItemLabelNutrientsTransFat), BrandedFoodItemLabelNutrientsTransFat sodium = default(BrandedFoodItemLabelNutrientsTransFat), BrandedFoodItemLabelNutrientsCarbohydrates carbohydrates = default(BrandedFoodItemLabelNutrientsCarbohydrates), BrandedFoodItemLabelNutrientsFiber fiber = default(BrandedFoodItemLabelNutrientsFiber), BrandedFoodItemLabelNutrientsSugars sugars = default(BrandedFoodItemLabelNutrientsSugars), BrandedFoodItemLabelNutrientsProtein protein = default(BrandedFoodItemLabelNutrientsProtein), BrandedFoodItemLabelNutrientsCalcium calcium = default(BrandedFoodItemLabelNutrientsCalcium), BrandedFoodItemLabelNutrientsIron iron = default(BrandedFoodItemLabelNutrientsIron), BrandedFoodItemLabelNutrientsPotassium potassium = default(BrandedFoodItemLabelNutrientsPotassium), BrandedFoodItemLabelNutrientsCalories calories = default(BrandedFoodItemLabelNutrientsCalories))
        {
            this.Fat = fat;
            this.SaturatedFat = saturatedFat;
            this.TransFat = transFat;
            this.Cholesterol = cholesterol;
            this.Sodium = sodium;
            this.Carbohydrates = carbohydrates;
            this.Fiber = fiber;
            this.Sugars = sugars;
            this.Protein = protein;
            this.Calcium = calcium;
            this.Iron = iron;
            this.Potassium = potassium;
            this.Calories = calories;
        }
        
        /// <summary>
        /// Gets or Sets Fat
        /// </summary>
        [DataMember(Name="fat", EmitDefaultValue=false)]
        public BrandedFoodItemLabelNutrientsFat Fat { get; set; }

        /// <summary>
        /// Gets or Sets SaturatedFat
        /// </summary>
        [DataMember(Name="saturatedFat", EmitDefaultValue=false)]
        public BrandedFoodItemLabelNutrientsSaturatedFat SaturatedFat { get; set; }

        /// <summary>
        /// Gets or Sets TransFat
        /// </summary>
        [DataMember(Name="transFat", EmitDefaultValue=false)]
        public BrandedFoodItemLabelNutrientsTransFat TransFat { get; set; }

        /// <summary>
        /// Gets or Sets Cholesterol
        /// </summary>
        [DataMember(Name="cholesterol", EmitDefaultValue=false)]
        public BrandedFoodItemLabelNutrientsTransFat Cholesterol { get; set; }

        /// <summary>
        /// Gets or Sets Sodium
        /// </summary>
        [DataMember(Name="sodium", EmitDefaultValue=false)]
        public BrandedFoodItemLabelNutrientsTransFat Sodium { get; set; }

        /// <summary>
        /// Gets or Sets Carbohydrates
        /// </summary>
        [DataMember(Name="carbohydrates", EmitDefaultValue=false)]
        public BrandedFoodItemLabelNutrientsCarbohydrates Carbohydrates { get; set; }

        /// <summary>
        /// Gets or Sets Fiber
        /// </summary>
        [DataMember(Name="fiber", EmitDefaultValue=false)]
        public BrandedFoodItemLabelNutrientsFiber Fiber { get; set; }

        /// <summary>
        /// Gets or Sets Sugars
        /// </summary>
        [DataMember(Name="sugars", EmitDefaultValue=false)]
        public BrandedFoodItemLabelNutrientsSugars Sugars { get; set; }

        /// <summary>
        /// Gets or Sets Protein
        /// </summary>
        [DataMember(Name="protein", EmitDefaultValue=false)]
        public BrandedFoodItemLabelNutrientsProtein Protein { get; set; }

        /// <summary>
        /// Gets or Sets Calcium
        /// </summary>
        [DataMember(Name="calcium", EmitDefaultValue=false)]
        public BrandedFoodItemLabelNutrientsCalcium Calcium { get; set; }

        /// <summary>
        /// Gets or Sets Iron
        /// </summary>
        [DataMember(Name="iron", EmitDefaultValue=false)]
        public BrandedFoodItemLabelNutrientsIron Iron { get; set; }

        /// <summary>
        /// Gets or Sets Potassium
        /// </summary>
        [DataMember(Name="potassium", EmitDefaultValue=false)]
        public BrandedFoodItemLabelNutrientsPotassium Potassium { get; set; }

        /// <summary>
        /// Gets or Sets Calories
        /// </summary>
        [DataMember(Name="calories", EmitDefaultValue=false)]
        public BrandedFoodItemLabelNutrientsCalories Calories { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BrandedFoodItemLabelNutrients {\n");
            sb.Append("  Fat: ").Append(Fat).Append("\n");
            sb.Append("  SaturatedFat: ").Append(SaturatedFat).Append("\n");
            sb.Append("  TransFat: ").Append(TransFat).Append("\n");
            sb.Append("  Cholesterol: ").Append(Cholesterol).Append("\n");
            sb.Append("  Sodium: ").Append(Sodium).Append("\n");
            sb.Append("  Carbohydrates: ").Append(Carbohydrates).Append("\n");
            sb.Append("  Fiber: ").Append(Fiber).Append("\n");
            sb.Append("  Sugars: ").Append(Sugars).Append("\n");
            sb.Append("  Protein: ").Append(Protein).Append("\n");
            sb.Append("  Calcium: ").Append(Calcium).Append("\n");
            sb.Append("  Iron: ").Append(Iron).Append("\n");
            sb.Append("  Potassium: ").Append(Potassium).Append("\n");
            sb.Append("  Calories: ").Append(Calories).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BrandedFoodItemLabelNutrients);
        }

        /// <summary>
        /// Returns true if BrandedFoodItemLabelNutrients instances are equal
        /// </summary>
        /// <param name="input">Instance of BrandedFoodItemLabelNutrients to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BrandedFoodItemLabelNutrients input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Fat == input.Fat ||
                    (this.Fat != null &&
                    this.Fat.Equals(input.Fat))
                ) && 
                (
                    this.SaturatedFat == input.SaturatedFat ||
                    (this.SaturatedFat != null &&
                    this.SaturatedFat.Equals(input.SaturatedFat))
                ) && 
                (
                    this.TransFat == input.TransFat ||
                    (this.TransFat != null &&
                    this.TransFat.Equals(input.TransFat))
                ) && 
                (
                    this.Cholesterol == input.Cholesterol ||
                    (this.Cholesterol != null &&
                    this.Cholesterol.Equals(input.Cholesterol))
                ) && 
                (
                    this.Sodium == input.Sodium ||
                    (this.Sodium != null &&
                    this.Sodium.Equals(input.Sodium))
                ) && 
                (
                    this.Carbohydrates == input.Carbohydrates ||
                    (this.Carbohydrates != null &&
                    this.Carbohydrates.Equals(input.Carbohydrates))
                ) && 
                (
                    this.Fiber == input.Fiber ||
                    (this.Fiber != null &&
                    this.Fiber.Equals(input.Fiber))
                ) && 
                (
                    this.Sugars == input.Sugars ||
                    (this.Sugars != null &&
                    this.Sugars.Equals(input.Sugars))
                ) && 
                (
                    this.Protein == input.Protein ||
                    (this.Protein != null &&
                    this.Protein.Equals(input.Protein))
                ) && 
                (
                    this.Calcium == input.Calcium ||
                    (this.Calcium != null &&
                    this.Calcium.Equals(input.Calcium))
                ) && 
                (
                    this.Iron == input.Iron ||
                    (this.Iron != null &&
                    this.Iron.Equals(input.Iron))
                ) && 
                (
                    this.Potassium == input.Potassium ||
                    (this.Potassium != null &&
                    this.Potassium.Equals(input.Potassium))
                ) && 
                (
                    this.Calories == input.Calories ||
                    (this.Calories != null &&
                    this.Calories.Equals(input.Calories))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Fat != null)
                    hashCode = hashCode * 59 + this.Fat.GetHashCode();
                if (this.SaturatedFat != null)
                    hashCode = hashCode * 59 + this.SaturatedFat.GetHashCode();
                if (this.TransFat != null)
                    hashCode = hashCode * 59 + this.TransFat.GetHashCode();
                if (this.Cholesterol != null)
                    hashCode = hashCode * 59 + this.Cholesterol.GetHashCode();
                if (this.Sodium != null)
                    hashCode = hashCode * 59 + this.Sodium.GetHashCode();
                if (this.Carbohydrates != null)
                    hashCode = hashCode * 59 + this.Carbohydrates.GetHashCode();
                if (this.Fiber != null)
                    hashCode = hashCode * 59 + this.Fiber.GetHashCode();
                if (this.Sugars != null)
                    hashCode = hashCode * 59 + this.Sugars.GetHashCode();
                if (this.Protein != null)
                    hashCode = hashCode * 59 + this.Protein.GetHashCode();
                if (this.Calcium != null)
                    hashCode = hashCode * 59 + this.Calcium.GetHashCode();
                if (this.Iron != null)
                    hashCode = hashCode * 59 + this.Iron.GetHashCode();
                if (this.Potassium != null)
                    hashCode = hashCode * 59 + this.Potassium.GetHashCode();
                if (this.Calories != null)
                    hashCode = hashCode * 59 + this.Calories.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
