/* 
 * Food Data Central API
 *
 * The FoodData Central API provides REST access to FoodData Central (FDC). It is intended primarily to assist application developers wishing to incorporate nutrient data into their applications or websites.   To take full advantage of the API, developers should familiarize themselves with the database by reading the database documentation available via links on [Data Type Documentation](https://fdc.nal.usda.gov/data-documentation.html). This documentation provides the detailed definitions and descriptions needed to understand the data elements referenced in the API documentation.      Additional details about the API including rate limits, access, and licensing are available on the [FDC website](https://fdc.nal.usda.gov/api-guide.html)
 *
 * OpenAPI spec version: 1.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IFDCApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Fetches details for one food item by FDC ID
        /// </summary>
        /// <remarks>
        /// Retrieves a single food item by an FDC ID. Optional format and nutrients can be specified.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fdcId">FDC id of the food to retrieve</param>
        /// <param name="format">Optional. &#x27;abridged&#x27; for an abridged set of elements, &#x27;full&#x27; for all elements (default). (optional)</param>
        /// <param name="nutrients">Optional. List of up to 25 nutrient numbers. Only the nutrient information for the specified nutrients will be returned. Should be comma separated list (e.g. nutrients&#x3D;203,204) or repeating parameters (e.g. nutrients&#x3D;203&amp;nutrients&#x3D;204). If a food does not have any matching nutrients, the food will be returned with an empty foodNutrients element. (optional)</param>
        /// <returns>InlineResponse200</returns>
        InlineResponse200 GetFood (string fdcId, string format = null, List<int?> nutrients = null);

        /// <summary>
        /// Fetches details for one food item by FDC ID
        /// </summary>
        /// <remarks>
        /// Retrieves a single food item by an FDC ID. Optional format and nutrients can be specified.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fdcId">FDC id of the food to retrieve</param>
        /// <param name="format">Optional. &#x27;abridged&#x27; for an abridged set of elements, &#x27;full&#x27; for all elements (default). (optional)</param>
        /// <param name="nutrients">Optional. List of up to 25 nutrient numbers. Only the nutrient information for the specified nutrients will be returned. Should be comma separated list (e.g. nutrients&#x3D;203,204) or repeating parameters (e.g. nutrients&#x3D;203&amp;nutrients&#x3D;204). If a food does not have any matching nutrients, the food will be returned with an empty foodNutrients element. (optional)</param>
        /// <returns>ApiResponse of InlineResponse200</returns>
        ApiResponse<InlineResponse200> GetFoodWithHttpInfo (string fdcId, string format = null, List<int?> nutrients = null);
        /// <summary>
        /// Fetches details for multiple food items using input FDC IDs
        /// </summary>
        /// <remarks>
        /// Retrieves a list of food items by a list of up to 20 FDC IDs. Optional format and nutrients can be specified. Invalid FDC ID&#x27;s or ones that are not found are omitted and an empty set is returned if there are no matches.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fdcIds">List of multiple FDC ID&#x27;s. Should be comma separated list (e.g. fdcIds&#x3D;534358,373052) or repeating parameters (e.g. fdcIds&#x3D;534358&amp;fdcIds&#x3D;373052).</param>
        /// <param name="format">Optional. &#x27;abridged&#x27; for an abridged set of elements, &#x27;full&#x27; for all elements (default). (optional)</param>
        /// <param name="nutrients">Optional. List of up to 25 nutrient numbers. Only the nutrient information for the specified nutrients will be returned. Should be comma separated list (e.g. nutrients&#x3D;203,204) or repeating parameters (e.g. nutrients&#x3D;203&amp;nutrients&#x3D;204). If a food does not have any matching nutrients, the food will be returned with an empty foodNutrients element. (optional)</param>
        /// <returns>List&lt;Object&gt;</returns>
        List<Object> GetFoods (List<string> fdcIds, string format = null, List<int?> nutrients = null);

        /// <summary>
        /// Fetches details for multiple food items using input FDC IDs
        /// </summary>
        /// <remarks>
        /// Retrieves a list of food items by a list of up to 20 FDC IDs. Optional format and nutrients can be specified. Invalid FDC ID&#x27;s or ones that are not found are omitted and an empty set is returned if there are no matches.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fdcIds">List of multiple FDC ID&#x27;s. Should be comma separated list (e.g. fdcIds&#x3D;534358,373052) or repeating parameters (e.g. fdcIds&#x3D;534358&amp;fdcIds&#x3D;373052).</param>
        /// <param name="format">Optional. &#x27;abridged&#x27; for an abridged set of elements, &#x27;full&#x27; for all elements (default). (optional)</param>
        /// <param name="nutrients">Optional. List of up to 25 nutrient numbers. Only the nutrient information for the specified nutrients will be returned. Should be comma separated list (e.g. nutrients&#x3D;203,204) or repeating parameters (e.g. nutrients&#x3D;203&amp;nutrients&#x3D;204). If a food does not have any matching nutrients, the food will be returned with an empty foodNutrients element. (optional)</param>
        /// <returns>ApiResponse of List&lt;Object&gt;</returns>
        ApiResponse<List<Object>> GetFoodsWithHttpInfo (List<string> fdcIds, string format = null, List<int?> nutrients = null);
        /// <summary>
        /// Returns a paged list of foods, in the &#x27;abridged&#x27; format
        /// </summary>
        /// <remarks>
        /// Retrieves a paged list of foods. Use the pageNumber parameter to page through the entire result set.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataType">Optional. Filter on a specific data type; specify one or more values in an array. (optional)</param>
        /// <param name="pageSize">Optional. Maximum number of results to return for the current page. Default is 50. (optional)</param>
        /// <param name="pageNumber">Optional. Page number to retrieve. The offset into the overall result set is expressed as (pageNumber * pageSize) (optional)</param>
        /// <param name="sortBy">Optional. Specify one of the possible values to sort by that field. Note, dataType.keyword will be dataType and lowercaseDescription.keyword will be description in future releases. (optional)</param>
        /// <param name="sortOrder">Optional. The sort direction for the results. Only applicable if sortBy is specified. (optional)</param>
        /// <returns>List&lt;AbridgedFoodItem&gt;</returns>
        List<AbridgedFoodItem> GetFoodsList (List<string> dataType = null, int? pageSize = null, int? pageNumber = null, string sortBy = null, string sortOrder = null);

        /// <summary>
        /// Returns a paged list of foods, in the &#x27;abridged&#x27; format
        /// </summary>
        /// <remarks>
        /// Retrieves a paged list of foods. Use the pageNumber parameter to page through the entire result set.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataType">Optional. Filter on a specific data type; specify one or more values in an array. (optional)</param>
        /// <param name="pageSize">Optional. Maximum number of results to return for the current page. Default is 50. (optional)</param>
        /// <param name="pageNumber">Optional. Page number to retrieve. The offset into the overall result set is expressed as (pageNumber * pageSize) (optional)</param>
        /// <param name="sortBy">Optional. Specify one of the possible values to sort by that field. Note, dataType.keyword will be dataType and lowercaseDescription.keyword will be description in future releases. (optional)</param>
        /// <param name="sortOrder">Optional. The sort direction for the results. Only applicable if sortBy is specified. (optional)</param>
        /// <returns>ApiResponse of List&lt;AbridgedFoodItem&gt;</returns>
        ApiResponse<List<AbridgedFoodItem>> GetFoodsListWithHttpInfo (List<string> dataType = null, int? pageSize = null, int? pageNumber = null, string sortBy = null, string sortOrder = null);
        /// <summary>
        /// Returns a list of foods that matched search (query) keywords
        /// </summary>
        /// <remarks>
        /// Search for foods using keywords. Results can be filtered by dataType and there are options for result page sizes or sorting.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">One or more search terms.  The string may include [search operators](https://fdc.nal.usda.gov/help.html#bkmk-2)</param>
        /// <param name="dataType">Optional. Filter on a specific data type; specify one or more values in an array. (optional)</param>
        /// <param name="pageSize">Optional. Maximum number of results to return for the current page. Default is 50. (optional)</param>
        /// <param name="pageNumber">Optional. Page number to retrieve. The offset into the overall result set is expressed as (pageNumber * pageSize) (optional)</param>
        /// <param name="sortBy">Optional. Specify one of the possible values to sort by that field. Note, dataType.keyword will be dataType and lowercaseDescription.keyword will be description in future releases. (optional)</param>
        /// <param name="sortOrder">Optional. The sort direction for the results. Only applicable if sortBy is specified. (optional)</param>
        /// <param name="brandOwner">Optional. Filter results based on the brand owner of the food. Only applies to Branded Foods (optional)</param>
        /// <returns>SearchResult</returns>
        SearchResult GetFoodsSearch (string query, List<string> dataType = null, int? pageSize = null, int? pageNumber = null, string sortBy = null, string sortOrder = null, string brandOwner = null);

        /// <summary>
        /// Returns a list of foods that matched search (query) keywords
        /// </summary>
        /// <remarks>
        /// Search for foods using keywords. Results can be filtered by dataType and there are options for result page sizes or sorting.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">One or more search terms.  The string may include [search operators](https://fdc.nal.usda.gov/help.html#bkmk-2)</param>
        /// <param name="dataType">Optional. Filter on a specific data type; specify one or more values in an array. (optional)</param>
        /// <param name="pageSize">Optional. Maximum number of results to return for the current page. Default is 50. (optional)</param>
        /// <param name="pageNumber">Optional. Page number to retrieve. The offset into the overall result set is expressed as (pageNumber * pageSize) (optional)</param>
        /// <param name="sortBy">Optional. Specify one of the possible values to sort by that field. Note, dataType.keyword will be dataType and lowercaseDescription.keyword will be description in future releases. (optional)</param>
        /// <param name="sortOrder">Optional. The sort direction for the results. Only applicable if sortBy is specified. (optional)</param>
        /// <param name="brandOwner">Optional. Filter results based on the brand owner of the food. Only applies to Branded Foods (optional)</param>
        /// <returns>ApiResponse of SearchResult</returns>
        ApiResponse<SearchResult> GetFoodsSearchWithHttpInfo (string query, List<string> dataType = null, int? pageSize = null, int? pageNumber = null, string sortBy = null, string sortOrder = null, string brandOwner = null);
        /// <summary>
        /// Returns this documentation in JSON format
        /// </summary>
        /// <remarks>
        /// The OpenAPI 3.0 specification for the FDC API rendered as JSON (JavaScript Object Notation)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void GetJsonSpec ();

        /// <summary>
        /// Returns this documentation in JSON format
        /// </summary>
        /// <remarks>
        /// The OpenAPI 3.0 specification for the FDC API rendered as JSON (JavaScript Object Notation)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetJsonSpecWithHttpInfo ();
        /// <summary>
        /// Returns this documentation in JSON format
        /// </summary>
        /// <remarks>
        /// The OpenAPI 3.0 specification for the FDC API rendered as YAML (YAML Ain&#x27;t Markup Language)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void GetYamlSpec ();

        /// <summary>
        /// Returns this documentation in JSON format
        /// </summary>
        /// <remarks>
        /// The OpenAPI 3.0 specification for the FDC API rendered as YAML (YAML Ain&#x27;t Markup Language)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetYamlSpecWithHttpInfo ();
        /// <summary>
        /// Fetches details for multiple food items using input FDC IDs
        /// </summary>
        /// <remarks>
        /// Retrieves a list of food items by a list of up to 20 FDC IDs. Optional format and nutrients can be specified. Invalid FDC ID&#x27;s or ones that are not found are omitted and an empty set is returned if there are no matches.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>List&lt;Object&gt;</returns>
        List<Object> PostFoods (FoodsCriteria body);

        /// <summary>
        /// Fetches details for multiple food items using input FDC IDs
        /// </summary>
        /// <remarks>
        /// Retrieves a list of food items by a list of up to 20 FDC IDs. Optional format and nutrients can be specified. Invalid FDC ID&#x27;s or ones that are not found are omitted and an empty set is returned if there are no matches.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of List&lt;Object&gt;</returns>
        ApiResponse<List<Object>> PostFoodsWithHttpInfo (FoodsCriteria body);
        /// <summary>
        /// Returns a paged list of foods, in the &#x27;abridged&#x27; format
        /// </summary>
        /// <remarks>
        /// Retrieves a paged list of foods. Use the pageNumber parameter to page through the entire result set.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>List&lt;AbridgedFoodItem&gt;</returns>
        List<AbridgedFoodItem> PostFoodsList (FoodListCriteria body);

        /// <summary>
        /// Returns a paged list of foods, in the &#x27;abridged&#x27; format
        /// </summary>
        /// <remarks>
        /// Retrieves a paged list of foods. Use the pageNumber parameter to page through the entire result set.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of List&lt;AbridgedFoodItem&gt;</returns>
        ApiResponse<List<AbridgedFoodItem>> PostFoodsListWithHttpInfo (FoodListCriteria body);
        /// <summary>
        /// Returns a list of foods that matched search (query) keywords
        /// </summary>
        /// <remarks>
        /// Search for foods using keywords. Results can be filtered by dataType and there are options for result page sizes or sorting.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The query string may also include standard [search operators](https://fdc.nal.usda.gov/help.html#bkmk-2)</param>
        /// <returns>SearchResult</returns>
        SearchResult PostFoodsSearch (FoodSearchCriteria body);

        /// <summary>
        /// Returns a list of foods that matched search (query) keywords
        /// </summary>
        /// <remarks>
        /// Search for foods using keywords. Results can be filtered by dataType and there are options for result page sizes or sorting.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The query string may also include standard [search operators](https://fdc.nal.usda.gov/help.html#bkmk-2)</param>
        /// <returns>ApiResponse of SearchResult</returns>
        ApiResponse<SearchResult> PostFoodsSearchWithHttpInfo (FoodSearchCriteria body);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Fetches details for one food item by FDC ID
        /// </summary>
        /// <remarks>
        /// Retrieves a single food item by an FDC ID. Optional format and nutrients can be specified.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fdcId">FDC id of the food to retrieve</param>
        /// <param name="format">Optional. &#x27;abridged&#x27; for an abridged set of elements, &#x27;full&#x27; for all elements (default). (optional)</param>
        /// <param name="nutrients">Optional. List of up to 25 nutrient numbers. Only the nutrient information for the specified nutrients will be returned. Should be comma separated list (e.g. nutrients&#x3D;203,204) or repeating parameters (e.g. nutrients&#x3D;203&amp;nutrients&#x3D;204). If a food does not have any matching nutrients, the food will be returned with an empty foodNutrients element. (optional)</param>
        /// <returns>Task of InlineResponse200</returns>
        System.Threading.Tasks.Task<InlineResponse200> GetFoodAsync (string fdcId, string format = null, List<int?> nutrients = null);

        /// <summary>
        /// Fetches details for one food item by FDC ID
        /// </summary>
        /// <remarks>
        /// Retrieves a single food item by an FDC ID. Optional format and nutrients can be specified.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fdcId">FDC id of the food to retrieve</param>
        /// <param name="format">Optional. &#x27;abridged&#x27; for an abridged set of elements, &#x27;full&#x27; for all elements (default). (optional)</param>
        /// <param name="nutrients">Optional. List of up to 25 nutrient numbers. Only the nutrient information for the specified nutrients will be returned. Should be comma separated list (e.g. nutrients&#x3D;203,204) or repeating parameters (e.g. nutrients&#x3D;203&amp;nutrients&#x3D;204). If a food does not have any matching nutrients, the food will be returned with an empty foodNutrients element. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse200)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse200>> GetFoodAsyncWithHttpInfo (string fdcId, string format = null, List<int?> nutrients = null);
        /// <summary>
        /// Fetches details for multiple food items using input FDC IDs
        /// </summary>
        /// <remarks>
        /// Retrieves a list of food items by a list of up to 20 FDC IDs. Optional format and nutrients can be specified. Invalid FDC ID&#x27;s or ones that are not found are omitted and an empty set is returned if there are no matches.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fdcIds">List of multiple FDC ID&#x27;s. Should be comma separated list (e.g. fdcIds&#x3D;534358,373052) or repeating parameters (e.g. fdcIds&#x3D;534358&amp;fdcIds&#x3D;373052).</param>
        /// <param name="format">Optional. &#x27;abridged&#x27; for an abridged set of elements, &#x27;full&#x27; for all elements (default). (optional)</param>
        /// <param name="nutrients">Optional. List of up to 25 nutrient numbers. Only the nutrient information for the specified nutrients will be returned. Should be comma separated list (e.g. nutrients&#x3D;203,204) or repeating parameters (e.g. nutrients&#x3D;203&amp;nutrients&#x3D;204). If a food does not have any matching nutrients, the food will be returned with an empty foodNutrients element. (optional)</param>
        /// <returns>Task of List&lt;Object&gt;</returns>
        System.Threading.Tasks.Task<List<Object>> GetFoodsAsync (List<string> fdcIds, string format = null, List<int?> nutrients = null);

        /// <summary>
        /// Fetches details for multiple food items using input FDC IDs
        /// </summary>
        /// <remarks>
        /// Retrieves a list of food items by a list of up to 20 FDC IDs. Optional format and nutrients can be specified. Invalid FDC ID&#x27;s or ones that are not found are omitted and an empty set is returned if there are no matches.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fdcIds">List of multiple FDC ID&#x27;s. Should be comma separated list (e.g. fdcIds&#x3D;534358,373052) or repeating parameters (e.g. fdcIds&#x3D;534358&amp;fdcIds&#x3D;373052).</param>
        /// <param name="format">Optional. &#x27;abridged&#x27; for an abridged set of elements, &#x27;full&#x27; for all elements (default). (optional)</param>
        /// <param name="nutrients">Optional. List of up to 25 nutrient numbers. Only the nutrient information for the specified nutrients will be returned. Should be comma separated list (e.g. nutrients&#x3D;203,204) or repeating parameters (e.g. nutrients&#x3D;203&amp;nutrients&#x3D;204). If a food does not have any matching nutrients, the food will be returned with an empty foodNutrients element. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Object&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Object>>> GetFoodsAsyncWithHttpInfo (List<string> fdcIds, string format = null, List<int?> nutrients = null);
        /// <summary>
        /// Returns a paged list of foods, in the &#x27;abridged&#x27; format
        /// </summary>
        /// <remarks>
        /// Retrieves a paged list of foods. Use the pageNumber parameter to page through the entire result set.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataType">Optional. Filter on a specific data type; specify one or more values in an array. (optional)</param>
        /// <param name="pageSize">Optional. Maximum number of results to return for the current page. Default is 50. (optional)</param>
        /// <param name="pageNumber">Optional. Page number to retrieve. The offset into the overall result set is expressed as (pageNumber * pageSize) (optional)</param>
        /// <param name="sortBy">Optional. Specify one of the possible values to sort by that field. Note, dataType.keyword will be dataType and lowercaseDescription.keyword will be description in future releases. (optional)</param>
        /// <param name="sortOrder">Optional. The sort direction for the results. Only applicable if sortBy is specified. (optional)</param>
        /// <returns>Task of List&lt;AbridgedFoodItem&gt;</returns>
        System.Threading.Tasks.Task<List<AbridgedFoodItem>> GetFoodsListAsync (List<string> dataType = null, int? pageSize = null, int? pageNumber = null, string sortBy = null, string sortOrder = null);

        /// <summary>
        /// Returns a paged list of foods, in the &#x27;abridged&#x27; format
        /// </summary>
        /// <remarks>
        /// Retrieves a paged list of foods. Use the pageNumber parameter to page through the entire result set.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataType">Optional. Filter on a specific data type; specify one or more values in an array. (optional)</param>
        /// <param name="pageSize">Optional. Maximum number of results to return for the current page. Default is 50. (optional)</param>
        /// <param name="pageNumber">Optional. Page number to retrieve. The offset into the overall result set is expressed as (pageNumber * pageSize) (optional)</param>
        /// <param name="sortBy">Optional. Specify one of the possible values to sort by that field. Note, dataType.keyword will be dataType and lowercaseDescription.keyword will be description in future releases. (optional)</param>
        /// <param name="sortOrder">Optional. The sort direction for the results. Only applicable if sortBy is specified. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;AbridgedFoodItem&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<AbridgedFoodItem>>> GetFoodsListAsyncWithHttpInfo (List<string> dataType = null, int? pageSize = null, int? pageNumber = null, string sortBy = null, string sortOrder = null);
        /// <summary>
        /// Returns a list of foods that matched search (query) keywords
        /// </summary>
        /// <remarks>
        /// Search for foods using keywords. Results can be filtered by dataType and there are options for result page sizes or sorting.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">One or more search terms.  The string may include [search operators](https://fdc.nal.usda.gov/help.html#bkmk-2)</param>
        /// <param name="dataType">Optional. Filter on a specific data type; specify one or more values in an array. (optional)</param>
        /// <param name="pageSize">Optional. Maximum number of results to return for the current page. Default is 50. (optional)</param>
        /// <param name="pageNumber">Optional. Page number to retrieve. The offset into the overall result set is expressed as (pageNumber * pageSize) (optional)</param>
        /// <param name="sortBy">Optional. Specify one of the possible values to sort by that field. Note, dataType.keyword will be dataType and lowercaseDescription.keyword will be description in future releases. (optional)</param>
        /// <param name="sortOrder">Optional. The sort direction for the results. Only applicable if sortBy is specified. (optional)</param>
        /// <param name="brandOwner">Optional. Filter results based on the brand owner of the food. Only applies to Branded Foods (optional)</param>
        /// <returns>Task of SearchResult</returns>
        System.Threading.Tasks.Task<SearchResult> GetFoodsSearchAsync (string query, List<string> dataType = null, int? pageSize = null, int? pageNumber = null, string sortBy = null, string sortOrder = null, string brandOwner = null);

        /// <summary>
        /// Returns a list of foods that matched search (query) keywords
        /// </summary>
        /// <remarks>
        /// Search for foods using keywords. Results can be filtered by dataType and there are options for result page sizes or sorting.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">One or more search terms.  The string may include [search operators](https://fdc.nal.usda.gov/help.html#bkmk-2)</param>
        /// <param name="dataType">Optional. Filter on a specific data type; specify one or more values in an array. (optional)</param>
        /// <param name="pageSize">Optional. Maximum number of results to return for the current page. Default is 50. (optional)</param>
        /// <param name="pageNumber">Optional. Page number to retrieve. The offset into the overall result set is expressed as (pageNumber * pageSize) (optional)</param>
        /// <param name="sortBy">Optional. Specify one of the possible values to sort by that field. Note, dataType.keyword will be dataType and lowercaseDescription.keyword will be description in future releases. (optional)</param>
        /// <param name="sortOrder">Optional. The sort direction for the results. Only applicable if sortBy is specified. (optional)</param>
        /// <param name="brandOwner">Optional. Filter results based on the brand owner of the food. Only applies to Branded Foods (optional)</param>
        /// <returns>Task of ApiResponse (SearchResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<SearchResult>> GetFoodsSearchAsyncWithHttpInfo (string query, List<string> dataType = null, int? pageSize = null, int? pageNumber = null, string sortBy = null, string sortOrder = null, string brandOwner = null);
        /// <summary>
        /// Returns this documentation in JSON format
        /// </summary>
        /// <remarks>
        /// The OpenAPI 3.0 specification for the FDC API rendered as JSON (JavaScript Object Notation)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetJsonSpecAsync ();

        /// <summary>
        /// Returns this documentation in JSON format
        /// </summary>
        /// <remarks>
        /// The OpenAPI 3.0 specification for the FDC API rendered as JSON (JavaScript Object Notation)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetJsonSpecAsyncWithHttpInfo ();
        /// <summary>
        /// Returns this documentation in JSON format
        /// </summary>
        /// <remarks>
        /// The OpenAPI 3.0 specification for the FDC API rendered as YAML (YAML Ain&#x27;t Markup Language)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetYamlSpecAsync ();

        /// <summary>
        /// Returns this documentation in JSON format
        /// </summary>
        /// <remarks>
        /// The OpenAPI 3.0 specification for the FDC API rendered as YAML (YAML Ain&#x27;t Markup Language)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetYamlSpecAsyncWithHttpInfo ();
        /// <summary>
        /// Fetches details for multiple food items using input FDC IDs
        /// </summary>
        /// <remarks>
        /// Retrieves a list of food items by a list of up to 20 FDC IDs. Optional format and nutrients can be specified. Invalid FDC ID&#x27;s or ones that are not found are omitted and an empty set is returned if there are no matches.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of List&lt;Object&gt;</returns>
        System.Threading.Tasks.Task<List<Object>> PostFoodsAsync (FoodsCriteria body);

        /// <summary>
        /// Fetches details for multiple food items using input FDC IDs
        /// </summary>
        /// <remarks>
        /// Retrieves a list of food items by a list of up to 20 FDC IDs. Optional format and nutrients can be specified. Invalid FDC ID&#x27;s or ones that are not found are omitted and an empty set is returned if there are no matches.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (List&lt;Object&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Object>>> PostFoodsAsyncWithHttpInfo (FoodsCriteria body);
        /// <summary>
        /// Returns a paged list of foods, in the &#x27;abridged&#x27; format
        /// </summary>
        /// <remarks>
        /// Retrieves a paged list of foods. Use the pageNumber parameter to page through the entire result set.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of List&lt;AbridgedFoodItem&gt;</returns>
        System.Threading.Tasks.Task<List<AbridgedFoodItem>> PostFoodsListAsync (FoodListCriteria body);

        /// <summary>
        /// Returns a paged list of foods, in the &#x27;abridged&#x27; format
        /// </summary>
        /// <remarks>
        /// Retrieves a paged list of foods. Use the pageNumber parameter to page through the entire result set.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (List&lt;AbridgedFoodItem&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<AbridgedFoodItem>>> PostFoodsListAsyncWithHttpInfo (FoodListCriteria body);
        /// <summary>
        /// Returns a list of foods that matched search (query) keywords
        /// </summary>
        /// <remarks>
        /// Search for foods using keywords. Results can be filtered by dataType and there are options for result page sizes or sorting.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The query string may also include standard [search operators](https://fdc.nal.usda.gov/help.html#bkmk-2)</param>
        /// <returns>Task of SearchResult</returns>
        System.Threading.Tasks.Task<SearchResult> PostFoodsSearchAsync (FoodSearchCriteria body);

        /// <summary>
        /// Returns a list of foods that matched search (query) keywords
        /// </summary>
        /// <remarks>
        /// Search for foods using keywords. Results can be filtered by dataType and there are options for result page sizes or sorting.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The query string may also include standard [search operators](https://fdc.nal.usda.gov/help.html#bkmk-2)</param>
        /// <returns>Task of ApiResponse (SearchResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<SearchResult>> PostFoodsSearchAsyncWithHttpInfo (FoodSearchCriteria body);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class FDCApi : IFDCApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="FDCApi"/> class.
        /// </summary>
        /// <returns></returns>
        public FDCApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FDCApi"/> class
        /// </summary>
        /// <returns></returns>
        public FDCApi()
        {
            this.Configuration = IO.Swagger.Client.Configuration.Default;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FDCApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public FDCApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Fetches details for one food item by FDC ID Retrieves a single food item by an FDC ID. Optional format and nutrients can be specified.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fdcId">FDC id of the food to retrieve</param>
        /// <param name="format">Optional. &#x27;abridged&#x27; for an abridged set of elements, &#x27;full&#x27; for all elements (default). (optional)</param>
        /// <param name="nutrients">Optional. List of up to 25 nutrient numbers. Only the nutrient information for the specified nutrients will be returned. Should be comma separated list (e.g. nutrients&#x3D;203,204) or repeating parameters (e.g. nutrients&#x3D;203&amp;nutrients&#x3D;204). If a food does not have any matching nutrients, the food will be returned with an empty foodNutrients element. (optional)</param>
        /// <returns>InlineResponse200</returns>
        public InlineResponse200 GetFood (string fdcId, string format = null, List<int?> nutrients = null)
        {
             ApiResponse<InlineResponse200> localVarResponse = GetFoodWithHttpInfo(fdcId, format, nutrients);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Fetches details for one food item by FDC ID Retrieves a single food item by an FDC ID. Optional format and nutrients can be specified.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fdcId">FDC id of the food to retrieve</param>
        /// <param name="format">Optional. &#x27;abridged&#x27; for an abridged set of elements, &#x27;full&#x27; for all elements (default). (optional)</param>
        /// <param name="nutrients">Optional. List of up to 25 nutrient numbers. Only the nutrient information for the specified nutrients will be returned. Should be comma separated list (e.g. nutrients&#x3D;203,204) or repeating parameters (e.g. nutrients&#x3D;203&amp;nutrients&#x3D;204). If a food does not have any matching nutrients, the food will be returned with an empty foodNutrients element. (optional)</param>
        /// <returns>ApiResponse of InlineResponse200</returns>
        public ApiResponse< InlineResponse200 > GetFoodWithHttpInfo (string fdcId, string format = null, List<int?> nutrients = null)
        {
            // verify the required parameter 'fdcId' is set
            if (fdcId == null)
                throw new ApiException(400, "Missing required parameter 'fdcId' when calling FDCApi->GetFood");

            var localVarPath = "/v1/food/{fdcId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fdcId != null) localVarPathParams.Add("fdcId", this.Configuration.ApiClient.ParameterToString(fdcId)); // path parameter
            if (format != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "format", format)); // query parameter
            if (nutrients != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "nutrients", nutrients)); // query parameter
            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", this.Configuration.GetApiKeyWithPrefix("api_key")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFood", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse200>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse200) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse200)));
        }

        /// <summary>
        /// Fetches details for one food item by FDC ID Retrieves a single food item by an FDC ID. Optional format and nutrients can be specified.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fdcId">FDC id of the food to retrieve</param>
        /// <param name="format">Optional. &#x27;abridged&#x27; for an abridged set of elements, &#x27;full&#x27; for all elements (default). (optional)</param>
        /// <param name="nutrients">Optional. List of up to 25 nutrient numbers. Only the nutrient information for the specified nutrients will be returned. Should be comma separated list (e.g. nutrients&#x3D;203,204) or repeating parameters (e.g. nutrients&#x3D;203&amp;nutrients&#x3D;204). If a food does not have any matching nutrients, the food will be returned with an empty foodNutrients element. (optional)</param>
        /// <returns>Task of InlineResponse200</returns>
        public async System.Threading.Tasks.Task<InlineResponse200> GetFoodAsync (string fdcId, string format = null, List<int?> nutrients = null)
        {
             ApiResponse<InlineResponse200> localVarResponse = await GetFoodAsyncWithHttpInfo(fdcId, format, nutrients);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Fetches details for one food item by FDC ID Retrieves a single food item by an FDC ID. Optional format and nutrients can be specified.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fdcId">FDC id of the food to retrieve</param>
        /// <param name="format">Optional. &#x27;abridged&#x27; for an abridged set of elements, &#x27;full&#x27; for all elements (default). (optional)</param>
        /// <param name="nutrients">Optional. List of up to 25 nutrient numbers. Only the nutrient information for the specified nutrients will be returned. Should be comma separated list (e.g. nutrients&#x3D;203,204) or repeating parameters (e.g. nutrients&#x3D;203&amp;nutrients&#x3D;204). If a food does not have any matching nutrients, the food will be returned with an empty foodNutrients element. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse200)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse200>> GetFoodAsyncWithHttpInfo (string fdcId, string format = null, List<int?> nutrients = null)
        {
            // verify the required parameter 'fdcId' is set
            if (fdcId == null)
                throw new ApiException(400, "Missing required parameter 'fdcId' when calling FDCApi->GetFood");

            var localVarPath = "/v1/food/{fdcId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fdcId != null) localVarPathParams.Add("fdcId", this.Configuration.ApiClient.ParameterToString(fdcId)); // path parameter
            if (format != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "format", format)); // query parameter
            if (nutrients != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "nutrients", nutrients)); // query parameter
            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", this.Configuration.GetApiKeyWithPrefix("api_key")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFood", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse200>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse200) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse200)));
        }

        /// <summary>
        /// Fetches details for multiple food items using input FDC IDs Retrieves a list of food items by a list of up to 20 FDC IDs. Optional format and nutrients can be specified. Invalid FDC ID&#x27;s or ones that are not found are omitted and an empty set is returned if there are no matches.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fdcIds">List of multiple FDC ID&#x27;s. Should be comma separated list (e.g. fdcIds&#x3D;534358,373052) or repeating parameters (e.g. fdcIds&#x3D;534358&amp;fdcIds&#x3D;373052).</param>
        /// <param name="format">Optional. &#x27;abridged&#x27; for an abridged set of elements, &#x27;full&#x27; for all elements (default). (optional)</param>
        /// <param name="nutrients">Optional. List of up to 25 nutrient numbers. Only the nutrient information for the specified nutrients will be returned. Should be comma separated list (e.g. nutrients&#x3D;203,204) or repeating parameters (e.g. nutrients&#x3D;203&amp;nutrients&#x3D;204). If a food does not have any matching nutrients, the food will be returned with an empty foodNutrients element. (optional)</param>
        /// <returns>List&lt;Object&gt;</returns>
        public List<Object> GetFoods (List<string> fdcIds, string format = null, List<int?> nutrients = null)
        {
             ApiResponse<List<Object>> localVarResponse = GetFoodsWithHttpInfo(fdcIds, format, nutrients);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Fetches details for multiple food items using input FDC IDs Retrieves a list of food items by a list of up to 20 FDC IDs. Optional format and nutrients can be specified. Invalid FDC ID&#x27;s or ones that are not found are omitted and an empty set is returned if there are no matches.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fdcIds">List of multiple FDC ID&#x27;s. Should be comma separated list (e.g. fdcIds&#x3D;534358,373052) or repeating parameters (e.g. fdcIds&#x3D;534358&amp;fdcIds&#x3D;373052).</param>
        /// <param name="format">Optional. &#x27;abridged&#x27; for an abridged set of elements, &#x27;full&#x27; for all elements (default). (optional)</param>
        /// <param name="nutrients">Optional. List of up to 25 nutrient numbers. Only the nutrient information for the specified nutrients will be returned. Should be comma separated list (e.g. nutrients&#x3D;203,204) or repeating parameters (e.g. nutrients&#x3D;203&amp;nutrients&#x3D;204). If a food does not have any matching nutrients, the food will be returned with an empty foodNutrients element. (optional)</param>
        /// <returns>ApiResponse of List&lt;Object&gt;</returns>
        public ApiResponse< List<Object> > GetFoodsWithHttpInfo (List<string> fdcIds, string format = null, List<int?> nutrients = null)
        {
            // verify the required parameter 'fdcIds' is set
            if (fdcIds == null)
                throw new ApiException(400, "Missing required parameter 'fdcIds' when calling FDCApi->GetFoods");

            var localVarPath = "/v1/foods";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fdcIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "fdcIds", fdcIds)); // query parameter
            if (format != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "format", format)); // query parameter
            if (nutrients != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "nutrients", nutrients)); // query parameter
            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", this.Configuration.GetApiKeyWithPrefix("api_key")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFoods", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Object>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Object>)));
        }

        /// <summary>
        /// Fetches details for multiple food items using input FDC IDs Retrieves a list of food items by a list of up to 20 FDC IDs. Optional format and nutrients can be specified. Invalid FDC ID&#x27;s or ones that are not found are omitted and an empty set is returned if there are no matches.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fdcIds">List of multiple FDC ID&#x27;s. Should be comma separated list (e.g. fdcIds&#x3D;534358,373052) or repeating parameters (e.g. fdcIds&#x3D;534358&amp;fdcIds&#x3D;373052).</param>
        /// <param name="format">Optional. &#x27;abridged&#x27; for an abridged set of elements, &#x27;full&#x27; for all elements (default). (optional)</param>
        /// <param name="nutrients">Optional. List of up to 25 nutrient numbers. Only the nutrient information for the specified nutrients will be returned. Should be comma separated list (e.g. nutrients&#x3D;203,204) or repeating parameters (e.g. nutrients&#x3D;203&amp;nutrients&#x3D;204). If a food does not have any matching nutrients, the food will be returned with an empty foodNutrients element. (optional)</param>
        /// <returns>Task of List&lt;Object&gt;</returns>
        public async System.Threading.Tasks.Task<List<Object>> GetFoodsAsync (List<string> fdcIds, string format = null, List<int?> nutrients = null)
        {
             ApiResponse<List<Object>> localVarResponse = await GetFoodsAsyncWithHttpInfo(fdcIds, format, nutrients);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Fetches details for multiple food items using input FDC IDs Retrieves a list of food items by a list of up to 20 FDC IDs. Optional format and nutrients can be specified. Invalid FDC ID&#x27;s or ones that are not found are omitted and an empty set is returned if there are no matches.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fdcIds">List of multiple FDC ID&#x27;s. Should be comma separated list (e.g. fdcIds&#x3D;534358,373052) or repeating parameters (e.g. fdcIds&#x3D;534358&amp;fdcIds&#x3D;373052).</param>
        /// <param name="format">Optional. &#x27;abridged&#x27; for an abridged set of elements, &#x27;full&#x27; for all elements (default). (optional)</param>
        /// <param name="nutrients">Optional. List of up to 25 nutrient numbers. Only the nutrient information for the specified nutrients will be returned. Should be comma separated list (e.g. nutrients&#x3D;203,204) or repeating parameters (e.g. nutrients&#x3D;203&amp;nutrients&#x3D;204). If a food does not have any matching nutrients, the food will be returned with an empty foodNutrients element. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Object&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Object>>> GetFoodsAsyncWithHttpInfo (List<string> fdcIds, string format = null, List<int?> nutrients = null)
        {
            // verify the required parameter 'fdcIds' is set
            if (fdcIds == null)
                throw new ApiException(400, "Missing required parameter 'fdcIds' when calling FDCApi->GetFoods");

            var localVarPath = "/v1/foods";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fdcIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "fdcIds", fdcIds)); // query parameter
            if (format != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "format", format)); // query parameter
            if (nutrients != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "nutrients", nutrients)); // query parameter
            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", this.Configuration.GetApiKeyWithPrefix("api_key")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFoods", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Object>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Object>)));
        }

        /// <summary>
        /// Returns a paged list of foods, in the &#x27;abridged&#x27; format Retrieves a paged list of foods. Use the pageNumber parameter to page through the entire result set.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataType">Optional. Filter on a specific data type; specify one or more values in an array. (optional)</param>
        /// <param name="pageSize">Optional. Maximum number of results to return for the current page. Default is 50. (optional)</param>
        /// <param name="pageNumber">Optional. Page number to retrieve. The offset into the overall result set is expressed as (pageNumber * pageSize) (optional)</param>
        /// <param name="sortBy">Optional. Specify one of the possible values to sort by that field. Note, dataType.keyword will be dataType and lowercaseDescription.keyword will be description in future releases. (optional)</param>
        /// <param name="sortOrder">Optional. The sort direction for the results. Only applicable if sortBy is specified. (optional)</param>
        /// <returns>List&lt;AbridgedFoodItem&gt;</returns>
        public List<AbridgedFoodItem> GetFoodsList (List<string> dataType = null, int? pageSize = null, int? pageNumber = null, string sortBy = null, string sortOrder = null)
        {
             ApiResponse<List<AbridgedFoodItem>> localVarResponse = GetFoodsListWithHttpInfo(dataType, pageSize, pageNumber, sortBy, sortOrder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a paged list of foods, in the &#x27;abridged&#x27; format Retrieves a paged list of foods. Use the pageNumber parameter to page through the entire result set.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataType">Optional. Filter on a specific data type; specify one or more values in an array. (optional)</param>
        /// <param name="pageSize">Optional. Maximum number of results to return for the current page. Default is 50. (optional)</param>
        /// <param name="pageNumber">Optional. Page number to retrieve. The offset into the overall result set is expressed as (pageNumber * pageSize) (optional)</param>
        /// <param name="sortBy">Optional. Specify one of the possible values to sort by that field. Note, dataType.keyword will be dataType and lowercaseDescription.keyword will be description in future releases. (optional)</param>
        /// <param name="sortOrder">Optional. The sort direction for the results. Only applicable if sortBy is specified. (optional)</param>
        /// <returns>ApiResponse of List&lt;AbridgedFoodItem&gt;</returns>
        public ApiResponse< List<AbridgedFoodItem> > GetFoodsListWithHttpInfo (List<string> dataType = null, int? pageSize = null, int? pageNumber = null, string sortBy = null, string sortOrder = null)
        {

            var localVarPath = "/v1/foods/list";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "dataType", dataType)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter
            if (pageNumber != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageNumber", pageNumber)); // query parameter
            if (sortBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sortBy", sortBy)); // query parameter
            if (sortOrder != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sortOrder", sortOrder)); // query parameter
            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", this.Configuration.GetApiKeyWithPrefix("api_key")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFoodsList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<AbridgedFoodItem>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<AbridgedFoodItem>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<AbridgedFoodItem>)));
        }

        /// <summary>
        /// Returns a paged list of foods, in the &#x27;abridged&#x27; format Retrieves a paged list of foods. Use the pageNumber parameter to page through the entire result set.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataType">Optional. Filter on a specific data type; specify one or more values in an array. (optional)</param>
        /// <param name="pageSize">Optional. Maximum number of results to return for the current page. Default is 50. (optional)</param>
        /// <param name="pageNumber">Optional. Page number to retrieve. The offset into the overall result set is expressed as (pageNumber * pageSize) (optional)</param>
        /// <param name="sortBy">Optional. Specify one of the possible values to sort by that field. Note, dataType.keyword will be dataType and lowercaseDescription.keyword will be description in future releases. (optional)</param>
        /// <param name="sortOrder">Optional. The sort direction for the results. Only applicable if sortBy is specified. (optional)</param>
        /// <returns>Task of List&lt;AbridgedFoodItem&gt;</returns>
        public async System.Threading.Tasks.Task<List<AbridgedFoodItem>> GetFoodsListAsync (List<string> dataType = null, int? pageSize = null, int? pageNumber = null, string sortBy = null, string sortOrder = null)
        {
             ApiResponse<List<AbridgedFoodItem>> localVarResponse = await GetFoodsListAsyncWithHttpInfo(dataType, pageSize, pageNumber, sortBy, sortOrder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns a paged list of foods, in the &#x27;abridged&#x27; format Retrieves a paged list of foods. Use the pageNumber parameter to page through the entire result set.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataType">Optional. Filter on a specific data type; specify one or more values in an array. (optional)</param>
        /// <param name="pageSize">Optional. Maximum number of results to return for the current page. Default is 50. (optional)</param>
        /// <param name="pageNumber">Optional. Page number to retrieve. The offset into the overall result set is expressed as (pageNumber * pageSize) (optional)</param>
        /// <param name="sortBy">Optional. Specify one of the possible values to sort by that field. Note, dataType.keyword will be dataType and lowercaseDescription.keyword will be description in future releases. (optional)</param>
        /// <param name="sortOrder">Optional. The sort direction for the results. Only applicable if sortBy is specified. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;AbridgedFoodItem&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<AbridgedFoodItem>>> GetFoodsListAsyncWithHttpInfo (List<string> dataType = null, int? pageSize = null, int? pageNumber = null, string sortBy = null, string sortOrder = null)
        {

            var localVarPath = "/v1/foods/list";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "dataType", dataType)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter
            if (pageNumber != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageNumber", pageNumber)); // query parameter
            if (sortBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sortBy", sortBy)); // query parameter
            if (sortOrder != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sortOrder", sortOrder)); // query parameter
            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", this.Configuration.GetApiKeyWithPrefix("api_key")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFoodsList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<AbridgedFoodItem>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<AbridgedFoodItem>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<AbridgedFoodItem>)));
        }

        /// <summary>
        /// Returns a list of foods that matched search (query) keywords Search for foods using keywords. Results can be filtered by dataType and there are options for result page sizes or sorting.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">One or more search terms.  The string may include [search operators](https://fdc.nal.usda.gov/help.html#bkmk-2)</param>
        /// <param name="dataType">Optional. Filter on a specific data type; specify one or more values in an array. (optional)</param>
        /// <param name="pageSize">Optional. Maximum number of results to return for the current page. Default is 50. (optional)</param>
        /// <param name="pageNumber">Optional. Page number to retrieve. The offset into the overall result set is expressed as (pageNumber * pageSize) (optional)</param>
        /// <param name="sortBy">Optional. Specify one of the possible values to sort by that field. Note, dataType.keyword will be dataType and lowercaseDescription.keyword will be description in future releases. (optional)</param>
        /// <param name="sortOrder">Optional. The sort direction for the results. Only applicable if sortBy is specified. (optional)</param>
        /// <param name="brandOwner">Optional. Filter results based on the brand owner of the food. Only applies to Branded Foods (optional)</param>
        /// <returns>SearchResult</returns>
        public SearchResult GetFoodsSearch (string query, List<string> dataType = null, int? pageSize = null, int? pageNumber = null, string sortBy = null, string sortOrder = null, string brandOwner = null)
        {
             ApiResponse<SearchResult> localVarResponse = GetFoodsSearchWithHttpInfo(query, dataType, pageSize, pageNumber, sortBy, sortOrder, brandOwner);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a list of foods that matched search (query) keywords Search for foods using keywords. Results can be filtered by dataType and there are options for result page sizes or sorting.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">One or more search terms.  The string may include [search operators](https://fdc.nal.usda.gov/help.html#bkmk-2)</param>
        /// <param name="dataType">Optional. Filter on a specific data type; specify one or more values in an array. (optional)</param>
        /// <param name="pageSize">Optional. Maximum number of results to return for the current page. Default is 50. (optional)</param>
        /// <param name="pageNumber">Optional. Page number to retrieve. The offset into the overall result set is expressed as (pageNumber * pageSize) (optional)</param>
        /// <param name="sortBy">Optional. Specify one of the possible values to sort by that field. Note, dataType.keyword will be dataType and lowercaseDescription.keyword will be description in future releases. (optional)</param>
        /// <param name="sortOrder">Optional. The sort direction for the results. Only applicable if sortBy is specified. (optional)</param>
        /// <param name="brandOwner">Optional. Filter results based on the brand owner of the food. Only applies to Branded Foods (optional)</param>
        /// <returns>ApiResponse of SearchResult</returns>
        public ApiResponse< SearchResult > GetFoodsSearchWithHttpInfo (string query, List<string> dataType = null, int? pageSize = null, int? pageNumber = null, string sortBy = null, string sortOrder = null, string brandOwner = null)
        {
            // verify the required parameter 'query' is set
            if (query == null)
                throw new ApiException(400, "Missing required parameter 'query' when calling FDCApi->GetFoodsSearch");

            var localVarPath = "/v1/foods/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (query != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "query", query)); // query parameter
            if (dataType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "dataType", dataType)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter
            if (pageNumber != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageNumber", pageNumber)); // query parameter
            if (sortBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sortBy", sortBy)); // query parameter
            if (sortOrder != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sortOrder", sortOrder)); // query parameter
            if (brandOwner != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "brandOwner", brandOwner)); // query parameter
            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", this.Configuration.GetApiKeyWithPrefix("api_key")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFoodsSearch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SearchResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SearchResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SearchResult)));
        }

        /// <summary>
        /// Returns a list of foods that matched search (query) keywords Search for foods using keywords. Results can be filtered by dataType and there are options for result page sizes or sorting.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">One or more search terms.  The string may include [search operators](https://fdc.nal.usda.gov/help.html#bkmk-2)</param>
        /// <param name="dataType">Optional. Filter on a specific data type; specify one or more values in an array. (optional)</param>
        /// <param name="pageSize">Optional. Maximum number of results to return for the current page. Default is 50. (optional)</param>
        /// <param name="pageNumber">Optional. Page number to retrieve. The offset into the overall result set is expressed as (pageNumber * pageSize) (optional)</param>
        /// <param name="sortBy">Optional. Specify one of the possible values to sort by that field. Note, dataType.keyword will be dataType and lowercaseDescription.keyword will be description in future releases. (optional)</param>
        /// <param name="sortOrder">Optional. The sort direction for the results. Only applicable if sortBy is specified. (optional)</param>
        /// <param name="brandOwner">Optional. Filter results based on the brand owner of the food. Only applies to Branded Foods (optional)</param>
        /// <returns>Task of SearchResult</returns>
        public async System.Threading.Tasks.Task<SearchResult> GetFoodsSearchAsync (string query, List<string> dataType = null, int? pageSize = null, int? pageNumber = null, string sortBy = null, string sortOrder = null, string brandOwner = null)
        {
             ApiResponse<SearchResult> localVarResponse = await GetFoodsSearchAsyncWithHttpInfo(query, dataType, pageSize, pageNumber, sortBy, sortOrder, brandOwner);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns a list of foods that matched search (query) keywords Search for foods using keywords. Results can be filtered by dataType and there are options for result page sizes or sorting.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">One or more search terms.  The string may include [search operators](https://fdc.nal.usda.gov/help.html#bkmk-2)</param>
        /// <param name="dataType">Optional. Filter on a specific data type; specify one or more values in an array. (optional)</param>
        /// <param name="pageSize">Optional. Maximum number of results to return for the current page. Default is 50. (optional)</param>
        /// <param name="pageNumber">Optional. Page number to retrieve. The offset into the overall result set is expressed as (pageNumber * pageSize) (optional)</param>
        /// <param name="sortBy">Optional. Specify one of the possible values to sort by that field. Note, dataType.keyword will be dataType and lowercaseDescription.keyword will be description in future releases. (optional)</param>
        /// <param name="sortOrder">Optional. The sort direction for the results. Only applicable if sortBy is specified. (optional)</param>
        /// <param name="brandOwner">Optional. Filter results based on the brand owner of the food. Only applies to Branded Foods (optional)</param>
        /// <returns>Task of ApiResponse (SearchResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SearchResult>> GetFoodsSearchAsyncWithHttpInfo (string query, List<string> dataType = null, int? pageSize = null, int? pageNumber = null, string sortBy = null, string sortOrder = null, string brandOwner = null)
        {
            // verify the required parameter 'query' is set
            if (query == null)
                throw new ApiException(400, "Missing required parameter 'query' when calling FDCApi->GetFoodsSearch");

            var localVarPath = "/v1/foods/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (query != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "query", query)); // query parameter
            if (dataType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "dataType", dataType)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter
            if (pageNumber != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageNumber", pageNumber)); // query parameter
            if (sortBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sortBy", sortBy)); // query parameter
            if (sortOrder != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sortOrder", sortOrder)); // query parameter
            if (brandOwner != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "brandOwner", brandOwner)); // query parameter
            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", this.Configuration.GetApiKeyWithPrefix("api_key")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFoodsSearch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SearchResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SearchResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SearchResult)));
        }

        /// <summary>
        /// Returns this documentation in JSON format The OpenAPI 3.0 specification for the FDC API rendered as JSON (JavaScript Object Notation)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void GetJsonSpec ()
        {
             GetJsonSpecWithHttpInfo();
        }

        /// <summary>
        /// Returns this documentation in JSON format The OpenAPI 3.0 specification for the FDC API rendered as JSON (JavaScript Object Notation)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetJsonSpecWithHttpInfo ()
        {

            var localVarPath = "/v1/json-spec";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", this.Configuration.GetApiKeyWithPrefix("api_key")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetJsonSpec", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Returns this documentation in JSON format The OpenAPI 3.0 specification for the FDC API rendered as JSON (JavaScript Object Notation)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetJsonSpecAsync ()
        {
             await GetJsonSpecAsyncWithHttpInfo();

        }

        /// <summary>
        /// Returns this documentation in JSON format The OpenAPI 3.0 specification for the FDC API rendered as JSON (JavaScript Object Notation)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetJsonSpecAsyncWithHttpInfo ()
        {

            var localVarPath = "/v1/json-spec";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", this.Configuration.GetApiKeyWithPrefix("api_key")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetJsonSpec", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Returns this documentation in JSON format The OpenAPI 3.0 specification for the FDC API rendered as YAML (YAML Ain&#x27;t Markup Language)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void GetYamlSpec ()
        {
             GetYamlSpecWithHttpInfo();
        }

        /// <summary>
        /// Returns this documentation in JSON format The OpenAPI 3.0 specification for the FDC API rendered as YAML (YAML Ain&#x27;t Markup Language)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetYamlSpecWithHttpInfo ()
        {

            var localVarPath = "/v1/yaml-spec";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", this.Configuration.GetApiKeyWithPrefix("api_key")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetYamlSpec", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Returns this documentation in JSON format The OpenAPI 3.0 specification for the FDC API rendered as YAML (YAML Ain&#x27;t Markup Language)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetYamlSpecAsync ()
        {
             await GetYamlSpecAsyncWithHttpInfo();

        }

        /// <summary>
        /// Returns this documentation in JSON format The OpenAPI 3.0 specification for the FDC API rendered as YAML (YAML Ain&#x27;t Markup Language)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetYamlSpecAsyncWithHttpInfo ()
        {

            var localVarPath = "/v1/yaml-spec";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", this.Configuration.GetApiKeyWithPrefix("api_key")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetYamlSpec", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Fetches details for multiple food items using input FDC IDs Retrieves a list of food items by a list of up to 20 FDC IDs. Optional format and nutrients can be specified. Invalid FDC ID&#x27;s or ones that are not found are omitted and an empty set is returned if there are no matches.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>List&lt;Object&gt;</returns>
        public List<Object> PostFoods (FoodsCriteria body)
        {
             ApiResponse<List<Object>> localVarResponse = PostFoodsWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Fetches details for multiple food items using input FDC IDs Retrieves a list of food items by a list of up to 20 FDC IDs. Optional format and nutrients can be specified. Invalid FDC ID&#x27;s or ones that are not found are omitted and an empty set is returned if there are no matches.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of List&lt;Object&gt;</returns>
        public ApiResponse< List<Object> > PostFoodsWithHttpInfo (FoodsCriteria body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling FDCApi->PostFoods");

            var localVarPath = "/v1/foods";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", this.Configuration.GetApiKeyWithPrefix("api_key")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostFoods", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Object>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Object>)));
        }

        /// <summary>
        /// Fetches details for multiple food items using input FDC IDs Retrieves a list of food items by a list of up to 20 FDC IDs. Optional format and nutrients can be specified. Invalid FDC ID&#x27;s or ones that are not found are omitted and an empty set is returned if there are no matches.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of List&lt;Object&gt;</returns>
        public async System.Threading.Tasks.Task<List<Object>> PostFoodsAsync (FoodsCriteria body)
        {
             ApiResponse<List<Object>> localVarResponse = await PostFoodsAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Fetches details for multiple food items using input FDC IDs Retrieves a list of food items by a list of up to 20 FDC IDs. Optional format and nutrients can be specified. Invalid FDC ID&#x27;s or ones that are not found are omitted and an empty set is returned if there are no matches.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (List&lt;Object&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Object>>> PostFoodsAsyncWithHttpInfo (FoodsCriteria body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling FDCApi->PostFoods");

            var localVarPath = "/v1/foods";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", this.Configuration.GetApiKeyWithPrefix("api_key")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostFoods", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Object>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Object>)));
        }

        /// <summary>
        /// Returns a paged list of foods, in the &#x27;abridged&#x27; format Retrieves a paged list of foods. Use the pageNumber parameter to page through the entire result set.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>List&lt;AbridgedFoodItem&gt;</returns>
        public List<AbridgedFoodItem> PostFoodsList (FoodListCriteria body)
        {
             ApiResponse<List<AbridgedFoodItem>> localVarResponse = PostFoodsListWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a paged list of foods, in the &#x27;abridged&#x27; format Retrieves a paged list of foods. Use the pageNumber parameter to page through the entire result set.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of List&lt;AbridgedFoodItem&gt;</returns>
        public ApiResponse< List<AbridgedFoodItem> > PostFoodsListWithHttpInfo (FoodListCriteria body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling FDCApi->PostFoodsList");

            var localVarPath = "/v1/foods/list";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", this.Configuration.GetApiKeyWithPrefix("api_key")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostFoodsList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<AbridgedFoodItem>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<AbridgedFoodItem>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<AbridgedFoodItem>)));
        }

        /// <summary>
        /// Returns a paged list of foods, in the &#x27;abridged&#x27; format Retrieves a paged list of foods. Use the pageNumber parameter to page through the entire result set.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of List&lt;AbridgedFoodItem&gt;</returns>
        public async System.Threading.Tasks.Task<List<AbridgedFoodItem>> PostFoodsListAsync (FoodListCriteria body)
        {
             ApiResponse<List<AbridgedFoodItem>> localVarResponse = await PostFoodsListAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns a paged list of foods, in the &#x27;abridged&#x27; format Retrieves a paged list of foods. Use the pageNumber parameter to page through the entire result set.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (List&lt;AbridgedFoodItem&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<AbridgedFoodItem>>> PostFoodsListAsyncWithHttpInfo (FoodListCriteria body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling FDCApi->PostFoodsList");

            var localVarPath = "/v1/foods/list";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", this.Configuration.GetApiKeyWithPrefix("api_key")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostFoodsList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<AbridgedFoodItem>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<AbridgedFoodItem>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<AbridgedFoodItem>)));
        }

        /// <summary>
        /// Returns a list of foods that matched search (query) keywords Search for foods using keywords. Results can be filtered by dataType and there are options for result page sizes or sorting.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The query string may also include standard [search operators](https://fdc.nal.usda.gov/help.html#bkmk-2)</param>
        /// <returns>SearchResult</returns>
        public SearchResult PostFoodsSearch (FoodSearchCriteria body)
        {
             ApiResponse<SearchResult> localVarResponse = PostFoodsSearchWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a list of foods that matched search (query) keywords Search for foods using keywords. Results can be filtered by dataType and there are options for result page sizes or sorting.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The query string may also include standard [search operators](https://fdc.nal.usda.gov/help.html#bkmk-2)</param>
        /// <returns>ApiResponse of SearchResult</returns>
        public ApiResponse< SearchResult > PostFoodsSearchWithHttpInfo (FoodSearchCriteria body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling FDCApi->PostFoodsSearch");

            var localVarPath = "/v1/foods/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", this.Configuration.GetApiKeyWithPrefix("api_key")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostFoodsSearch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SearchResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SearchResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SearchResult)));
        }

        /// <summary>
        /// Returns a list of foods that matched search (query) keywords Search for foods using keywords. Results can be filtered by dataType and there are options for result page sizes or sorting.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The query string may also include standard [search operators](https://fdc.nal.usda.gov/help.html#bkmk-2)</param>
        /// <returns>Task of SearchResult</returns>
        public async System.Threading.Tasks.Task<SearchResult> PostFoodsSearchAsync (FoodSearchCriteria body)
        {
             ApiResponse<SearchResult> localVarResponse = await PostFoodsSearchAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns a list of foods that matched search (query) keywords Search for foods using keywords. Results can be filtered by dataType and there are options for result page sizes or sorting.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The query string may also include standard [search operators](https://fdc.nal.usda.gov/help.html#bkmk-2)</param>
        /// <returns>Task of ApiResponse (SearchResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SearchResult>> PostFoodsSearchAsyncWithHttpInfo (FoodSearchCriteria body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling FDCApi->PostFoodsSearch");

            var localVarPath = "/v1/foods/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", this.Configuration.GetApiKeyWithPrefix("api_key")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostFoodsSearch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SearchResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SearchResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SearchResult)));
        }

    }
}
