/* 
 * Food Data Central API
 *
 * The FoodData Central API provides REST access to FoodData Central (FDC). It is intended primarily to assist application developers wishing to incorporate nutrient data into their applications or websites.   To take full advantage of the API, developers should familiarize themselves with the database by reading the database documentation available via links on [Data Type Documentation](https://fdc.nal.usda.gov/data-documentation.html). This documentation provides the detailed definitions and descriptions needed to understand the data elements referenced in the API documentation.      Additional details about the API including rate limits, access, and licensing are available on the [FDC website](https://fdc.nal.usda.gov/api-guide.html)
 *
 * OpenAPI spec version: 1.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;
namespace IO.Swagger.Model
{
    /// <summary>
    /// A copy of the criteria that were used in the search.
    /// </summary>
    [DataContract]
        public partial class FoodSearchCriteria :  IEquatable<FoodSearchCriteria>, IValidatableObject
    {
        /// <summary>
        /// Defines DataType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum DataTypeEnum
        {
            /// <summary>
            /// Enum Branded for value: Branded
            /// </summary>
            [EnumMember(Value = "Branded")]
            Branded = 1,
            /// <summary>
            /// Enum Foundation for value: Foundation
            /// </summary>
            [EnumMember(Value = "Foundation")]
            Foundation = 2,
            /// <summary>
            /// Enum SurveyFNDDS for value: Survey (FNDDS)
            /// </summary>
            [EnumMember(Value = "Survey (FNDDS)")]
            SurveyFNDDS = 3,
            /// <summary>
            /// Enum SRLegacy for value: SR Legacy
            /// </summary>
            [EnumMember(Value = "SR Legacy")]
            SRLegacy = 4        }
        /// <summary>
        /// Optional. Filter on a specific data type; specify one or more values in an array.
        /// </summary>
        /// <value>Optional. Filter on a specific data type; specify one or more values in an array.</value>
        [DataMember(Name="dataType", EmitDefaultValue=false)]
        public List<DataTypeEnum> DataType { get; set; }
        /// <summary>
        /// Optional. Specify one of the possible values to sort by that field. Note, dataType.keyword will be dataType and description.keyword will be description in future releases.
        /// </summary>
        /// <value>Optional. Specify one of the possible values to sort by that field. Note, dataType.keyword will be dataType and description.keyword will be description in future releases.</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum SortByEnum
        {
            /// <summary>
            /// Enum DataTypeKeyword for value: dataType.keyword
            /// </summary>
            [EnumMember(Value = "dataType.keyword")]
            DataTypeKeyword = 1,
            /// <summary>
            /// Enum LowercaseDescriptionKeyword for value: lowercaseDescription.keyword
            /// </summary>
            [EnumMember(Value = "lowercaseDescription.keyword")]
            LowercaseDescriptionKeyword = 2,
            /// <summary>
            /// Enum FdcId for value: fdcId
            /// </summary>
            [EnumMember(Value = "fdcId")]
            FdcId = 3,
            /// <summary>
            /// Enum PublishedDate for value: publishedDate
            /// </summary>
            [EnumMember(Value = "publishedDate")]
            PublishedDate = 4        }
        /// <summary>
        /// Optional. Specify one of the possible values to sort by that field. Note, dataType.keyword will be dataType and description.keyword will be description in future releases.
        /// </summary>
        /// <value>Optional. Specify one of the possible values to sort by that field. Note, dataType.keyword will be dataType and description.keyword will be description in future releases.</value>
        [DataMember(Name="sortBy", EmitDefaultValue=false)]
        public SortByEnum? SortBy { get; set; }
        /// <summary>
        /// Optional. The sort direction for the results. Only applicable if sortBy is specified.
        /// </summary>
        /// <value>Optional. The sort direction for the results. Only applicable if sortBy is specified.</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum SortOrderEnum
        {
            /// <summary>
            /// Enum Asc for value: asc
            /// </summary>
            [EnumMember(Value = "asc")]
            Asc = 1,
            /// <summary>
            /// Enum Desc for value: desc
            /// </summary>
            [EnumMember(Value = "desc")]
            Desc = 2        }
        /// <summary>
        /// Optional. The sort direction for the results. Only applicable if sortBy is specified.
        /// </summary>
        /// <value>Optional. The sort direction for the results. Only applicable if sortBy is specified.</value>
        [DataMember(Name="sortOrder", EmitDefaultValue=false)]
        public SortOrderEnum? SortOrder { get; set; }
        /// <summary>
        /// Defines TradeChannel
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum TradeChannelEnum
        {
            /// <summary>
            /// Enum CHILDNUTRITIONFOODPROGRAMS for value: CHILD_NUTRITION_FOOD_PROGRAMS
            /// </summary>
            [EnumMember(Value = "CHILD_NUTRITION_FOOD_PROGRAMS")]
            CHILDNUTRITIONFOODPROGRAMS = 1,
            /// <summary>
            /// Enum DRUG for value: DRUG
            /// </summary>
            [EnumMember(Value = "DRUG")]
            DRUG = 2,
            /// <summary>
            /// Enum FOODSERVICE for value: FOOD_SERVICE
            /// </summary>
            [EnumMember(Value = "FOOD_SERVICE")]
            FOODSERVICE = 3,
            /// <summary>
            /// Enum GROCERY for value: GROCERY
            /// </summary>
            [EnumMember(Value = "GROCERY")]
            GROCERY = 4,
            /// <summary>
            /// Enum MASSMERCHANDISING for value: MASS_MERCHANDISING
            /// </summary>
            [EnumMember(Value = "MASS_MERCHANDISING")]
            MASSMERCHANDISING = 5,
            /// <summary>
            /// Enum MILITARY for value: MILITARY
            /// </summary>
            [EnumMember(Value = "MILITARY")]
            MILITARY = 6,
            /// <summary>
            /// Enum ONLINE for value: ONLINE
            /// </summary>
            [EnumMember(Value = "ONLINE")]
            ONLINE = 7,
            /// <summary>
            /// Enum VENDING for value: VENDING
            /// </summary>
            [EnumMember(Value = "VENDING")]
            VENDING = 8        }
        /// <summary>
        /// Optional. Filter foods containing any of the specified trade channels.
        /// </summary>
        /// <value>Optional. Filter foods containing any of the specified trade channels.</value>
        [DataMember(Name="tradeChannel", EmitDefaultValue=false)]
        public List<TradeChannelEnum> TradeChannel { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="FoodSearchCriteria" /> class.
        /// </summary>
        /// <param name="query">Search terms to use in the search. The string may also include standard [search operators](https://fdc.nal.usda.gov/help.html#bkmk-2).</param>
        /// <param name="dataType">Optional. Filter on a specific data type; specify one or more values in an array..</param>
        /// <param name="pageSize">Optional. Maximum number of results to return for the current page. Default is 50..</param>
        /// <param name="pageNumber">Optional. Page number to retrieve. The offset into the overall result set is expressed as (pageNumber * pageSize).</param>
        /// <param name="sortBy">Optional. Specify one of the possible values to sort by that field. Note, dataType.keyword will be dataType and description.keyword will be description in future releases..</param>
        /// <param name="sortOrder">Optional. The sort direction for the results. Only applicable if sortBy is specified..</param>
        /// <param name="brandOwner">Optional. Filter results based on the brand owner of the food. Only applies to Branded Foods..</param>
        /// <param name="tradeChannel">Optional. Filter foods containing any of the specified trade channels..</param>
        /// <param name="startDate">Filter foods published on or after this date. Format: YYYY-MM-DD.</param>
        /// <param name="endDate">Filter foods published on or before this date. Format: YYYY-MM-DD.</param>
        public FoodSearchCriteria(string query = default(string), List<DataTypeEnum> dataType = default(List<DataTypeEnum>), int? pageSize = default(int?), int? pageNumber = default(int?), SortByEnum? sortBy = default(SortByEnum?), SortOrderEnum? sortOrder = default(SortOrderEnum?), string brandOwner = default(string), List<TradeChannelEnum> tradeChannel = default(List<TradeChannelEnum>), string startDate = default(string), string endDate = default(string))
        {
            this.Query = query;
            this.DataType = dataType;
            this.PageSize = pageSize;
            this.PageNumber = pageNumber;
            this.SortBy = sortBy;
            this.SortOrder = sortOrder;
            this.BrandOwner = brandOwner;
            this.TradeChannel = tradeChannel;
            this.StartDate = startDate;
            this.EndDate = endDate;
        }
        
        /// <summary>
        /// Search terms to use in the search. The string may also include standard [search operators](https://fdc.nal.usda.gov/help.html#bkmk-2)
        /// </summary>
        /// <value>Search terms to use in the search. The string may also include standard [search operators](https://fdc.nal.usda.gov/help.html#bkmk-2)</value>
        [DataMember(Name="query", EmitDefaultValue=false)]
        public string Query { get; set; }


        /// <summary>
        /// Optional. Maximum number of results to return for the current page. Default is 50.
        /// </summary>
        /// <value>Optional. Maximum number of results to return for the current page. Default is 50.</value>
        [DataMember(Name="pageSize", EmitDefaultValue=false)]
        public int? PageSize { get; set; }

        /// <summary>
        /// Optional. Page number to retrieve. The offset into the overall result set is expressed as (pageNumber * pageSize)
        /// </summary>
        /// <value>Optional. Page number to retrieve. The offset into the overall result set is expressed as (pageNumber * pageSize)</value>
        [DataMember(Name="pageNumber", EmitDefaultValue=false)]
        public int? PageNumber { get; set; }



        /// <summary>
        /// Optional. Filter results based on the brand owner of the food. Only applies to Branded Foods.
        /// </summary>
        /// <value>Optional. Filter results based on the brand owner of the food. Only applies to Branded Foods.</value>
        [DataMember(Name="brandOwner", EmitDefaultValue=false)]
        public string BrandOwner { get; set; }


        /// <summary>
        /// Filter foods published on or after this date. Format: YYYY-MM-DD
        /// </summary>
        /// <value>Filter foods published on or after this date. Format: YYYY-MM-DD</value>
        [DataMember(Name="startDate", EmitDefaultValue=false)]
        public string StartDate { get; set; }

        /// <summary>
        /// Filter foods published on or before this date. Format: YYYY-MM-DD
        /// </summary>
        /// <value>Filter foods published on or before this date. Format: YYYY-MM-DD</value>
        [DataMember(Name="endDate", EmitDefaultValue=false)]
        public string EndDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FoodSearchCriteria {\n");
            sb.Append("  Query: ").Append(Query).Append("\n");
            sb.Append("  DataType: ").Append(DataType).Append("\n");
            sb.Append("  PageSize: ").Append(PageSize).Append("\n");
            sb.Append("  PageNumber: ").Append(PageNumber).Append("\n");
            sb.Append("  SortBy: ").Append(SortBy).Append("\n");
            sb.Append("  SortOrder: ").Append(SortOrder).Append("\n");
            sb.Append("  BrandOwner: ").Append(BrandOwner).Append("\n");
            sb.Append("  TradeChannel: ").Append(TradeChannel).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FoodSearchCriteria);
        }

        /// <summary>
        /// Returns true if FoodSearchCriteria instances are equal
        /// </summary>
        /// <param name="input">Instance of FoodSearchCriteria to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FoodSearchCriteria input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Query == input.Query ||
                    (this.Query != null &&
                    this.Query.Equals(input.Query))
                ) && 
                (
                    this.DataType == input.DataType ||
                    this.DataType != null &&
                    input.DataType != null &&
                    this.DataType.SequenceEqual(input.DataType)
                ) && 
                (
                    this.PageSize == input.PageSize ||
                    (this.PageSize != null &&
                    this.PageSize.Equals(input.PageSize))
                ) && 
                (
                    this.PageNumber == input.PageNumber ||
                    (this.PageNumber != null &&
                    this.PageNumber.Equals(input.PageNumber))
                ) && 
                (
                    this.SortBy == input.SortBy ||
                    (this.SortBy != null &&
                    this.SortBy.Equals(input.SortBy))
                ) && 
                (
                    this.SortOrder == input.SortOrder ||
                    (this.SortOrder != null &&
                    this.SortOrder.Equals(input.SortOrder))
                ) && 
                (
                    this.BrandOwner == input.BrandOwner ||
                    (this.BrandOwner != null &&
                    this.BrandOwner.Equals(input.BrandOwner))
                ) && 
                (
                    this.TradeChannel == input.TradeChannel ||
                    this.TradeChannel != null &&
                    input.TradeChannel != null &&
                    this.TradeChannel.SequenceEqual(input.TradeChannel)
                ) && 
                (
                    this.StartDate == input.StartDate ||
                    (this.StartDate != null &&
                    this.StartDate.Equals(input.StartDate))
                ) && 
                (
                    this.EndDate == input.EndDate ||
                    (this.EndDate != null &&
                    this.EndDate.Equals(input.EndDate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Query != null)
                    hashCode = hashCode * 59 + this.Query.GetHashCode();
                if (this.DataType != null)
                    hashCode = hashCode * 59 + this.DataType.GetHashCode();
                if (this.PageSize != null)
                    hashCode = hashCode * 59 + this.PageSize.GetHashCode();
                if (this.PageNumber != null)
                    hashCode = hashCode * 59 + this.PageNumber.GetHashCode();
                if (this.SortBy != null)
                    hashCode = hashCode * 59 + this.SortBy.GetHashCode();
                if (this.SortOrder != null)
                    hashCode = hashCode * 59 + this.SortOrder.GetHashCode();
                if (this.BrandOwner != null)
                    hashCode = hashCode * 59 + this.BrandOwner.GetHashCode();
                if (this.TradeChannel != null)
                    hashCode = hashCode * 59 + this.TradeChannel.GetHashCode();
                if (this.StartDate != null)
                    hashCode = hashCode * 59 + this.StartDate.GetHashCode();
                if (this.EndDate != null)
                    hashCode = hashCode * 59 + this.EndDate.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
