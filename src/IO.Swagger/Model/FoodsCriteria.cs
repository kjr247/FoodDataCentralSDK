/* 
 * Food Data Central API
 *
 * The FoodData Central API provides REST access to FoodData Central (FDC). It is intended primarily to assist application developers wishing to incorporate nutrient data into their applications or websites.   To take full advantage of the API, developers should familiarize themselves with the database by reading the database documentation available via links on [Data Type Documentation](https://fdc.nal.usda.gov/data-documentation.html). This documentation provides the detailed definitions and descriptions needed to understand the data elements referenced in the API documentation.      Additional details about the API including rate limits, access, and licensing are available on the [FDC website](https://fdc.nal.usda.gov/api-guide.html)
 *
 * OpenAPI spec version: 1.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;
namespace IO.Swagger.Model
{
    /// <summary>
    /// JSON for request body of &#x27;foods&#x27; POST request. Retrieves a list of food items by a list of up to 20 FDC IDs. Optional format and nutrients can be specified. Invalid FDC ID&#x27;s or ones that are not found are omitted and an empty set is returned if there are no matches.
    /// </summary>
    [DataContract]
        public partial class FoodsCriteria :  IEquatable<FoodsCriteria>, IValidatableObject
    {
        /// <summary>
        /// Optional. &#x27;abridged&#x27; for an abridged set of elements, &#x27;full&#x27; for all elements (default).
        /// </summary>
        /// <value>Optional. &#x27;abridged&#x27; for an abridged set of elements, &#x27;full&#x27; for all elements (default).</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum FormatEnum
        {
            /// <summary>
            /// Enum Abridged for value: abridged
            /// </summary>
            [EnumMember(Value = "abridged")]
            Abridged = 1,
            /// <summary>
            /// Enum Full for value: full
            /// </summary>
            [EnumMember(Value = "full")]
            Full = 2        }
        /// <summary>
        /// Optional. &#x27;abridged&#x27; for an abridged set of elements, &#x27;full&#x27; for all elements (default).
        /// </summary>
        /// <value>Optional. &#x27;abridged&#x27; for an abridged set of elements, &#x27;full&#x27; for all elements (default).</value>
        [DataMember(Name="format", EmitDefaultValue=false)]
        public FormatEnum? Format { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="FoodsCriteria" /> class.
        /// </summary>
        /// <param name="fdcIds">List of multiple FDC ID&#x27;s.</param>
        /// <param name="format">Optional. &#x27;abridged&#x27; for an abridged set of elements, &#x27;full&#x27; for all elements (default)..</param>
        /// <param name="nutrients">Optional. List of up to 25 nutrient numbers. Only the nutrient information for the specified nutrients will be returned.  If a food does not have any matching nutrients, the food will be returned with an empty foodNutrients element..</param>
        public FoodsCriteria(List<int?> fdcIds = default(List<int?>), FormatEnum? format = default(FormatEnum?), List<int?> nutrients = default(List<int?>))
        {
            this.FdcIds = fdcIds;
            this.Format = format;
            this.Nutrients = nutrients;
        }
        
        /// <summary>
        /// List of multiple FDC ID&#x27;s
        /// </summary>
        /// <value>List of multiple FDC ID&#x27;s</value>
        [DataMember(Name="fdcIds", EmitDefaultValue=false)]
        public List<int?> FdcIds { get; set; }


        /// <summary>
        /// Optional. List of up to 25 nutrient numbers. Only the nutrient information for the specified nutrients will be returned.  If a food does not have any matching nutrients, the food will be returned with an empty foodNutrients element.
        /// </summary>
        /// <value>Optional. List of up to 25 nutrient numbers. Only the nutrient information for the specified nutrients will be returned.  If a food does not have any matching nutrients, the food will be returned with an empty foodNutrients element.</value>
        [DataMember(Name="nutrients", EmitDefaultValue=false)]
        public List<int?> Nutrients { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FoodsCriteria {\n");
            sb.Append("  FdcIds: ").Append(FdcIds).Append("\n");
            sb.Append("  Format: ").Append(Format).Append("\n");
            sb.Append("  Nutrients: ").Append(Nutrients).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FoodsCriteria);
        }

        /// <summary>
        /// Returns true if FoodsCriteria instances are equal
        /// </summary>
        /// <param name="input">Instance of FoodsCriteria to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FoodsCriteria input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.FdcIds == input.FdcIds ||
                    this.FdcIds != null &&
                    input.FdcIds != null &&
                    this.FdcIds.SequenceEqual(input.FdcIds)
                ) && 
                (
                    this.Format == input.Format ||
                    (this.Format != null &&
                    this.Format.Equals(input.Format))
                ) && 
                (
                    this.Nutrients == input.Nutrients ||
                    this.Nutrients != null &&
                    input.Nutrients != null &&
                    this.Nutrients.SequenceEqual(input.Nutrients)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FdcIds != null)
                    hashCode = hashCode * 59 + this.FdcIds.GetHashCode();
                if (this.Format != null)
                    hashCode = hashCode * 59 + this.Format.GetHashCode();
                if (this.Nutrients != null)
                    hashCode = hashCode * 59 + this.Nutrients.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
